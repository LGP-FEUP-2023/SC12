{"version":3,"sources":["module.android.ts"],"names":["RNP","NativeModules","RNPermissions","coreStatusToStatus","status","RESULTS","GRANTED","DENIED","BLOCKED","UNAVAILABLE","openSettings","check","permission","available","includes","Core","isNonRequestable","request","rationale","setNonRequestable","splitByAvailability","permissions","unavailable","index","length","push","checkNotifications","checkMultiple","dedup","output","blocklist","getNonRequestables","Promise","all","map","granted","requestMultiple","toSetAsNonRequestable","statuses","hasOwnProperty","setNonRequestables","module","requestNotifications"],"mappings":"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","sourcesContent":["import {\n  NativeModules,\n  Permission as CorePermission,\n  PermissionsAndroid as Core,\n  PermissionStatus as CoreStatus,\n  Rationale,\n} from 'react-native';\nimport {RESULTS} from './constants';\nimport {Contract} from './contract';\nimport {NotificationsResponse, Permission, PermissionStatus} from './types';\nimport {uniq} from './utils';\n\nconst RNP: {\n  available: Permission[];\n\n  checkNotifications: () => Promise<NotificationsResponse>;\n  openSettings: () => Promise<true>;\n  getNonRequestables: () => Promise<Permission[]>;\n  isNonRequestable: (permission: Permission) => Promise<boolean>;\n  setNonRequestable: (permission: Permission) => Promise<true>;\n  setNonRequestables: (permissions: Permission[]) => Promise<true>;\n} = NativeModules.RNPermissions;\n\nfunction coreStatusToStatus(status: CoreStatus): PermissionStatus {\n  switch (status) {\n    case 'granted':\n      return RESULTS.GRANTED;\n    case 'denied':\n      return RESULTS.DENIED;\n    case 'never_ask_again':\n      return RESULTS.BLOCKED;\n    default:\n      return RESULTS.UNAVAILABLE;\n  }\n}\n\nasync function openSettings(): Promise<void> {\n  await RNP.openSettings();\n}\n\nasync function check(permission: Permission): Promise<PermissionStatus> {\n  if (!RNP.available.includes(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  if (await Core.check(permission as CorePermission)) {\n    return RESULTS.GRANTED;\n  }\n\n  return (await RNP.isNonRequestable(permission))\n    ? RESULTS.BLOCKED\n    : RESULTS.DENIED;\n}\n\nasync function request(\n  permission: Permission,\n  rationale?: Rationale,\n): Promise<PermissionStatus> {\n  if (!RNP.available.includes(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  const status = coreStatusToStatus(\n    await Core.request(permission as CorePermission, rationale),\n  );\n\n  if (status === RESULTS.BLOCKED) {\n    await RNP.setNonRequestable(permission);\n  }\n\n  return status;\n}\n\nfunction splitByAvailability<P extends Permission[]>(\n  permissions: P,\n): {\n  unavailable: Partial<Record<P[number], PermissionStatus>>;\n  available: P[number][];\n} {\n  const unavailable: Partial<Record<P[number], PermissionStatus>> = {};\n  const available: P[number][] = [];\n\n  for (let index = 0; index < permissions.length; index++) {\n    const permission: P[number] = permissions[index];\n\n    if (RNP.available.includes(permission)) {\n      available.push(permission);\n    } else {\n      unavailable[permission] = RESULTS.UNAVAILABLE;\n    }\n  }\n\n  return {unavailable, available};\n}\n\nfunction checkNotifications(): Promise<NotificationsResponse> {\n  return RNP.checkNotifications();\n}\n\nasync function checkMultiple<P extends Permission[]>(\n  permissions: P,\n): Promise<Record<P[number], PermissionStatus>> {\n  const dedup = uniq(permissions);\n  const {unavailable: output, available} = splitByAvailability(dedup);\n  const blocklist = await RNP.getNonRequestables();\n\n  await Promise.all(\n    available.map(async (permission: P[number]) => {\n      const granted = await Core.check(permission as CorePermission);\n\n      output[permission] = granted\n        ? RESULTS.GRANTED\n        : blocklist.includes(permission)\n        ? RESULTS.BLOCKED\n        : RESULTS.DENIED;\n    }),\n  );\n\n  return output as Record<P[number], PermissionStatus>;\n}\n\nasync function requestMultiple<P extends Permission[]>(\n  permissions: P,\n): Promise<Record<P[number], PermissionStatus>> {\n  const toSetAsNonRequestable: Permission[] = [];\n  const dedup = uniq(permissions);\n  const {unavailable: output, available} = splitByAvailability(dedup);\n  const statuses = await Core.requestMultiple(available as CorePermission[]);\n\n  for (const permission in statuses) {\n    if (statuses.hasOwnProperty(permission)) {\n      const status = coreStatusToStatus(statuses[permission as CorePermission]);\n      output[permission as P[number]] = status;\n\n      status === RESULTS.BLOCKED &&\n        toSetAsNonRequestable.push(permission as Permission);\n    }\n  }\n\n  if (toSetAsNonRequestable.length > 0) {\n    await RNP.setNonRequestables(toSetAsNonRequestable);\n  }\n\n  return output as Record<P[number], PermissionStatus>;\n}\n\nexport const module: Contract = {\n  openSettings,\n  check,\n  request,\n  checkNotifications,\n  requestNotifications: checkNotifications,\n  checkMultiple,\n  requestMultiple,\n};\n"]}